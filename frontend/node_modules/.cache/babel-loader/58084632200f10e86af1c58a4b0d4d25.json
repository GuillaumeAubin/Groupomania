{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aubin\\\\Desktop\\\\OpenClassrooms\\\\Groupomania\\\\frontend\\\\src\\\\components\\\\CommentSection.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback, useContext } from 'react';\nimport AddCommentModal from './AddCommentModal';\nimport DataContext from '../DataContext';\nimport Axios from \"axios\";\nimport { FaTrashAlt } from 'react-icons/fa';\nimport '../style/Comment.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CommentSection({\n  postId\n}) {\n  _s();\n\n  const {\n    dataUser,\n    LStoken\n  } = useContext(DataContext);\n  const [comments, setComments] = useState([]);\n  const [isOpenCommentModal, setIsOpenCommentModal] = useState(false);\n  const [comment, setComment] = useState('');\n  const userId = dataUser.id;\n  const fetchComments = useCallback(() => {\n    Axios.get(`http://localhost:3001/api/comment/ofpost/${postId}`, {\n      headers: {\n        Authorization: LStoken\n      }\n    }).then(response => {\n      setComments(response.data);\n    });\n  } // [LStoken]\n  );\n  const submitComment = useCallback(() => {\n    console.log(LStoken);\n    const userId = dataUser.id;\n    const userName = dataUser.name;\n    console.log(postId);\n    console.log(userName);\n    Axios.post(`http://localhost:3001/api/comment/${postId}`, {\n      content: comment,\n      userId: userId,\n      userName: userName\n    }, {\n      headers: {\n        Authorization: LStoken\n      }\n    });\n    setIsOpenCommentModal(!isOpenCommentModal); // refresh page after submit\n\n    window.location.reload();\n    setComments([...comments, {\n      comment: comment,\n      userName: userName\n    }]);\n  }, [comment, postId]);\n\n  const deleteComment = id => {\n    console.log(id);\n    Axios.delete(`http://localhost:3001/api/comment/${id}`, {\n      headers: {\n        Authorization: LStoken\n      }\n    });\n    const newComments = comments.filter(comment => comment.id !== id);\n    setComments(newComments);\n  };\n\n  useEffect(() => {\n    fetchComments();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"horizontal-bar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"add-comment-btn\",\n      onClick: () => setIsOpenCommentModal(true),\n      children: \"Add a comment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AddCommentModal, {\n      open: isOpenCommentModal,\n      onClose: () => setIsOpenCommentModal(false),\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"input-content\",\n        placeholder: \"Add a comment\",\n        name: \"content\",\n        type: \"text\",\n        onChange: e => {\n          setComment(e.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"submit-btn\",\n        onClick: submitComment,\n        children: \"SUBMIT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment-section\",\n      children: comments.map(comment => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comment-single\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"comment-inner-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"comment-of\",\n              children: [\"- commentaire cr\\xE9\\xE9 par \", comment.userName, \" -\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"comment-text\",\n              children: comment.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 29\n          }, this), comment.userId == userId || dataUser.moderator == true ? /*#__PURE__*/_jsxDEV(FaTrashAlt, {\n            className: \"delete-comment-btn\",\n            onClick: () => deleteComment(comment.id)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 33\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CommentSection, \"0qkXtLnwPrjIC/WoRzuSkcfE2WY=\");\n\n_c = CommentSection;\n\nvar _c;\n\n$RefreshReg$(_c, \"CommentSection\");","map":{"version":3,"sources":["C:/Users/aubin/Desktop/OpenClassrooms/Groupomania/frontend/src/components/CommentSection.js"],"names":["React","useState","useEffect","useCallback","useContext","AddCommentModal","DataContext","Axios","FaTrashAlt","CommentSection","postId","dataUser","LStoken","comments","setComments","isOpenCommentModal","setIsOpenCommentModal","comment","setComment","userId","id","fetchComments","get","headers","Authorization","then","response","data","submitComment","console","log","userName","name","post","content","window","location","reload","deleteComment","delete","newComments","filter","e","target","value","map","moderator"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback, useContext } from 'react'\nimport AddCommentModal from './AddCommentModal'\nimport DataContext from '../DataContext'\nimport Axios from \"axios\";\nimport { FaTrashAlt } from 'react-icons/fa';\nimport '../style/Comment.css'\n\n\nexport default function CommentSection({ postId }) {\n\n    const { dataUser, LStoken } = useContext(DataContext)\n    const [comments, setComments] = useState([])\n    const [isOpenCommentModal, setIsOpenCommentModal] = useState(false)\n    const [comment, setComment] = useState('')\n    const userId = dataUser.id\n\n\n    const fetchComments = useCallback(() => {\n        Axios.get(`http://localhost:3001/api/comment/ofpost/${postId}`,\n            {\n                headers: {\n                    Authorization: LStoken\n                }\n            }\n        )\n            .then((response) => {\n                setComments(response.data)\n\n            })\n    },\n        // [LStoken]\n    )\n\n    const submitComment = useCallback(() => {\n        console.log(LStoken)\n        const userId = dataUser.id\n        const userName = dataUser.name\n        console.log(postId)\n        console.log(userName)\n        Axios.post(`http://localhost:3001/api/comment/${postId}`,\n            {\n                content: comment,\n                userId: userId,\n                userName: userName\n            },\n            {\n                headers: {\n                    Authorization: LStoken\n                }\n            },\n        )\n        setIsOpenCommentModal(!isOpenCommentModal)\n        // refresh page after submit\n        window.location.reload();\n        setComments([...comments, { comment: comment, userName: userName }])\n\n    }, [comment, postId])\n\n\n    const deleteComment = (id) => {\n        console.log(id)\n        Axios.delete(`http://localhost:3001/api/comment/${id}`,\n            {\n                headers: {\n                    Authorization: LStoken\n                }\n            }\n        )\n\n        const newComments = comments.filter((comment) => comment.id !== id);\n        setComments(newComments)\n\n    }\n\n    useEffect(() => {\n        fetchComments();\n\n    }, []);\n\n\n    return (\n        <div>\n            <div className=\"horizontal-bar\"></div>\n            <button className=\"add-comment-btn\" onClick={() => setIsOpenCommentModal(true)}>Add a comment</button>\n\n            <AddCommentModal open={isOpenCommentModal} onClose={() => setIsOpenCommentModal(false)}>\n                <textarea className=\"input-content\" placeholder=\"Add a comment\" name=\"content\" type=\"text\"\n                    onChange={(e) => {\n                        setComment(e.target.value)\n                    }}></textarea>\n                <button className=\"submit-btn\" onClick={submitComment}>SUBMIT</button>\n            </AddCommentModal>\n\n\n            <div className=\"comment-section\">\n                {comments.map((comment) => {\n\n                    return (\n                        <div className=\"comment-single\">\n                            <div className=\"comment-inner-container\">\n                                <p className=\"comment-of\">- commentaire créé par {comment.userName} -</p>\n                                <p className=\"comment-text\">{comment.content}</p>\n                            </div>\n\n                            {comment.userId == userId || dataUser.moderator == true ?\n\n                                <FaTrashAlt className=\"delete-comment-btn\" onClick={() => deleteComment(comment.id)} />\n\n                                : null\n\n                            }\n\n\n\n                        </div>\n                    )\n                })}\n            </div>\n\n        </div>\n    )\n\n\n}\n"]},"metadata":{},"sourceType":"module"}